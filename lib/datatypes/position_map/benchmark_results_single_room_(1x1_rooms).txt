Benchmark Results - Single Room (1x1 rooms)

=== Spiral Pattern Test ===
Points: 500, Room Transitions: 0
Position Generation: 0.72ms (1.440µs/pt)

Implementation       Init(ms)   Set(ms)  Set(µs/pt)    Set%   Get(ms)  Get(µs/pt)    Get%     Memory
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
MultiroomDistMap        0.000      0.13      0.258   +0.0%      0.12      0.241   +0.0%    19.6KB
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
YMajorPackedMap         0.000      0.03      0.066  -74.5%      0.03      0.061  -74.7%    19.6KB
CachedRoomArrayMap      0.000      0.04      0.077  -70.3%      0.04      0.072  -70.4%    19.6KB
CachedMultiroomMap      0.000      0.04      0.080  -69.1%      0.04      0.074  -69.4%    19.6KB
DecomposedArray4D       0.000      0.07      0.142  -44.8%      0.05      0.105  -56.4%     9.2KB
Array4DMap              0.000      0.07      0.136  -47.1%      0.06      0.112  -53.7%     9.2KB
ChunkedGlobalYMajor     0.000      0.08      0.154  -40.3%      0.08      0.155  -36.0%    32.1KB
VectorArrayMap          0.000      0.13      0.255   -1.1%      0.12      0.235   -2.6%       74B

ChunkedGlobal           0.000      0.14      0.274   +6.1%      0.14      0.275  +13.7%    32.1KB


=== Zigzag Room Transitions Test ===
Points: 500, Room Transitions: 0
Position Generation: 1.26ms (2.522µs/pt)

Implementation       Init(ms)   Set(ms)  Set(µs/pt)    Set%   Get(ms)  Get(µs/pt)    Get%     Memory
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
MultiroomDistMap        0.000      0.13      0.256   +0.0%      0.12      0.240   +0.0%    19.6KB
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
YMajorPackedMap         0.000      0.03      0.066  -74.3%      0.03      0.061  -74.5%    19.6KB
CachedRoomArrayMap      0.000      0.04      0.076  -70.2%      0.04      0.071  -70.3%    19.6KB
CachedMultiroomMap      0.000      0.04      0.080  -68.9%      0.04      0.074  -68.9%    19.6KB
DecomposedArray4D       0.000      0.08      0.157  -38.5%      0.05      0.105  -56.0%    20.8KB
Array4DMap              0.000      0.08      0.152  -40.6%      0.06      0.112  -53.2%    20.8KB
ChunkedGlobalYMajor     0.000      0.08      0.154  -39.9%      0.08      0.154  -35.6%    32.1KB
VectorArrayMap          0.000      0.13      0.258   +0.7%      0.12      0.235   -1.9%       74B

ChunkedGlobal           0.000      0.14      0.276   +8.0%      0.14      0.276  +14.9%    32.1KB


=== Flood Fill Pattern Test ===
Points: 500, Room Transitions: 0
Position Generation: 1.59ms (3.186µs/pt)

Implementation       Init(ms)   Set(ms)  Set(µs/pt)    Set%   Get(ms)  Get(µs/pt)    Get%     Memory
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
MultiroomDistMap        0.000      0.13      0.257   +0.0%      0.12      0.240   +0.0%    19.6KB
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
YMajorPackedMap         0.000      0.03      0.066  -74.4%      0.03      0.061  -74.5%    19.6KB
CachedRoomArrayMap      0.000      0.04      0.076  -70.2%      0.04      0.071  -70.3%    19.6KB
CachedMultiroomMap      0.000      0.04      0.080  -68.9%      0.04      0.074  -69.0%    19.6KB
DecomposedArray4D       0.000      0.07      0.142  -44.6%      0.05      0.105  -56.1%     9.2KB
Array4DMap              0.000      0.07      0.136  -47.1%      0.06      0.112  -53.4%     9.2KB
ChunkedGlobalYMajor     0.000      0.08      0.154  -40.0%      0.08      0.155  -35.6%    32.1KB
VectorArrayMap          0.000      0.13      0.256   -0.3%      0.12      0.235   -2.1%       74B

ChunkedGlobal           0.000      0.14      0.274   +7.0%      0.14      0.275  +14.7%    32.1KB

Note: Set% and Get% show performance relative to MultiroomDistanceMap (+ is slower, - is faster)
      Times are in milliseconds, per-point times in microseconds
      Results are sorted by Get time (fastest to slowest)
