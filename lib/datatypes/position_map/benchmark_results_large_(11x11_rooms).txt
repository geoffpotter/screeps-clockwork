Benchmark Results - Large (11x11 rooms)

=== Spiral Pattern Test ===
Points: 60500, Room Transitions: 1255
Position Generation: 64.52ms (1.067µs/pt)

Implementation       Init(ms)   Set(ms)  Set(µs/pt)    Set%   Get(ms)  Get(µs/pt)    Get%     Memory
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
MultiroomDistMap        0.000     15.18      0.251   +0.0%     14.38      0.238   +0.0%   703.2KB
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
YMajorPackedMap         0.000      3.96      0.066  -73.9%      3.90      0.064  -72.9%   703.8KB
CachedRoomArrayMap      0.000      4.58      0.076  -69.8%      4.47      0.074  -68.9%   703.8KB
CachedMultiroomMap      0.000      4.81      0.080  -68.3%      4.67      0.077  -67.5%   703.7KB
DecomposedArray4D       0.000      7.77      0.128  -48.8%      6.32      0.104  -56.1%   612.2KB
Array4DMap              0.000      7.64      0.126  -49.7%      6.66      0.110  -53.7%   612.2KB
ChunkedGlobalYMajor     0.000      9.07      0.150  -40.2%      9.18      0.152  -36.2%   800.9KB
VectorArrayMap          0.000     14.30      0.236   -5.7%     13.78      0.228   -4.2%      984B

ChunkedGlobal           0.000     16.55      0.274   +9.1%     17.60      0.291  +22.3%   800.1KB


=== Zigzag Room Transitions Test ===
Points: 60500, Room Transitions: 60017
Position Generation: 131.30ms (2.170µs/pt)

Implementation       Init(ms)   Set(ms)  Set(µs/pt)    Set%   Get(ms)  Get(µs/pt)    Get%     Memory
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
MultiroomDistMap        0.000     15.74      0.260   +0.0%     14.69      0.243   +0.0%     2.3MB
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
DecomposedArray4D       0.000      9.22      0.152  -41.4%      6.53      0.108  -55.5%     2.4MB
Array4DMap              0.000      9.24      0.153  -41.3%      6.78      0.112  -53.8%     2.4MB
ChunkedGlobalYMajor     0.000      9.34      0.154  -40.6%      9.48      0.157  -35.5%     2.5MB
VectorArrayMap          0.000     15.56      0.257   -1.1%     14.17      0.234   -3.5%     3.1KB
YMajorPackedMap         0.000     14.51      0.240   -7.8%     14.48      0.239   -1.4%     2.3MB

CachedRoomArrayMap      0.000     15.23      0.252   -3.3%     14.99      0.248   +2.1%     2.3MB
CachedMultiroomMap      0.000     15.64      0.258   -0.7%     15.17      0.251   +3.3%     2.3MB
ChunkedGlobal           0.000     17.03      0.281   +8.2%     17.99      0.297  +22.5%     2.5MB


=== Flood Fill Pattern Test ===
Points: 121000, Room Transitions: 89894
Position Generation: 372.05ms (3.075µs/pt)

Implementation       Init(ms)   Set(ms)  Set(µs/pt)    Set%   Get(ms)  Get(µs/pt)    Get%     Memory
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
MultiroomDistMap        0.000     30.02      0.248   +0.0%     28.67      0.237   +0.0%   957.1KB
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
DecomposedArray4D       0.000     15.23      0.126  -49.3%     12.57      0.104  -56.2%  1009.2KB
Array4DMap              0.000     15.10      0.125  -49.7%     13.35      0.110  -53.4%  1009.2KB
ChunkedGlobalYMajor     0.001     18.53      0.153  -38.3%     18.79      0.155  -34.5%     1.5MB
YMajorPackedMap         0.000     22.73      0.188  -24.3%     23.07      0.191  -19.5%   957.9KB
CachedRoomArrayMap      0.000     24.10      0.199  -19.7%     24.06      0.199  -16.1%   957.9KB
CachedMultiroomMap      0.000     24.76      0.205  -17.5%     24.41      0.202  -14.9%   957.6KB
VectorArrayMap          0.000     28.33      0.234   -5.6%     27.70      0.229   -3.4%     1.3KB

ChunkedGlobal           0.000     33.09      0.273  +10.2%     35.26      0.291  +23.0%     1.5MB

Note: Set% and Get% show performance relative to MultiroomDistanceMap (+ is slower, - is faster)
      Times are in milliseconds, per-point times in microseconds
      Results are sorted by Get time (fastest to slowest)
