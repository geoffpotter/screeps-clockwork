Benchmark Results - Huge (21x21 rooms)

=== Spiral Pattern Test ===
Points: 220500, Room Transitions: 4447
Position Generation: 212.14ms (0.962µs/pt)

Implementation       Init(ms)   Set(ms)  Set(µs/pt)    Set%   Get(ms)  Get(µs/pt)    Get%     Memory
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
MultiroomDistMap        0.001     55.33      0.251   +0.0%     53.02      0.240   +0.0%     1.9MB
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
YMajorPackedMap         0.000     14.56      0.066  -73.7%     14.43      0.065  -72.8%     1.9MB
CachedRoomArrayMap      0.000     16.60      0.075  -70.0%     16.32      0.074  -69.2%     1.9MB
CachedMultiroomMap      0.000     17.40      0.079  -68.5%     17.02      0.077  -67.9%     1.9MB
DecomposedArray4D       0.000     28.24      0.128  -49.0%     23.43      0.106  -55.8%     1.9MB
Array4DMap              0.000     27.66      0.125  -50.0%     24.35      0.110  -54.1%     1.9MB
ChunkedGlobalYMajor     0.000     33.20      0.151  -40.0%     33.77      0.153  -36.3%     2.5MB
VectorArrayMap          0.000     52.06      0.236   -5.9%     51.61      0.234   -2.7%     2.6KB

ChunkedGlobal           0.000     59.60      0.270   +7.7%     63.75      0.289  +20.2%     2.5MB


=== Zigzag Room Transitions Test ===
Points: 220500, Room Transitions: 220018
Position Generation: 450.81ms (2.044µs/pt)

Implementation       Init(ms)   Set(ms)  Set(µs/pt)    Set%   Get(ms)  Get(µs/pt)    Get%     Memory
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
MultiroomDistMap        0.001     60.05      0.272   +0.0%     56.58      0.257   +0.0%     8.4MB
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
DecomposedArray4D       0.000     34.91      0.158  -41.9%     25.34      0.115  -55.2%     8.9MB
Array4DMap              0.000     34.65      0.157  -42.3%     25.89      0.117  -54.2%     8.9MB
ChunkedGlobalYMajor     0.001     35.02      0.159  -41.7%     35.55      0.161  -37.2%     9.0MB
VectorArrayMap          0.000     58.92      0.267   -1.9%     55.05      0.250   -2.7%    11.2KB
YMajorPackedMap         0.000     55.44      0.251   -7.7%     55.85      0.253   -1.3%     8.4MB

CachedRoomArrayMap      0.000     58.53      0.265   -2.5%     59.33      0.269   +4.9%     8.4MB
CachedMultiroomMap      0.000     61.90      0.281   +3.1%     59.81      0.271   +5.7%     8.4MB
ChunkedGlobal           0.000     62.31      0.283   +3.8%     65.72      0.298  +16.2%     9.0MB


=== Flood Fill Pattern Test ===
Points: 441000, Room Transitions: 379510
Position Generation: 1217.76ms (2.761µs/pt)

Implementation       Init(ms)   Set(ms)  Set(µs/pt)    Set%   Get(ms)  Get(µs/pt)    Get%     Memory
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
MultiroomDistMap        0.001    110.49      0.251   +0.0%    105.17      0.238   +0.0%     4.3MB
-------------------- -------- --------- ----------- ------- --------- ----------- ------- ----------
DecomposedArray4D       0.000     56.47      0.128  -48.9%     46.87      0.106  -55.4%     4.0MB
Array4DMap              0.000     55.54      0.126  -49.7%     48.95      0.111  -53.5%     4.0MB
ChunkedGlobalYMajor     0.001     66.63      0.151  -39.7%     68.18      0.155  -35.2%     3.8MB
YMajorPackedMap         0.001     92.87      0.211  -15.9%     94.25      0.214  -10.4%     4.3MB
CachedMultiroomMap      0.001    102.39      0.232   -7.3%     99.44      0.225   -5.4%     4.3MB
CachedRoomArrayMap      0.001     97.58      0.221  -11.7%     99.51      0.226   -5.4%     4.3MB
VectorArrayMap          0.001    105.17      0.238   -4.8%    103.72      0.235   -1.4%     5.8KB

ChunkedGlobal           0.001    120.14      0.272   +8.7%    127.62      0.289  +21.3%     3.8MB

Note: Set% and Get% show performance relative to MultiroomDistanceMap (+ is slower, - is faster)
      Times are in milliseconds, per-point times in microseconds
      Results are sorted by Get time (fastest to slowest)
